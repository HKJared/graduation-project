var exec = require('child_process').exec;
var fs = require('fs');
var cuid = require('cuid');
var colors = require('colors');

exports.stats = false;

exports.compilePascal = function (envData, code, fn) {
    var filename = cuid.slug();
    var path = './temp/';

    fs.writeFile(path + filename + '.pas', code, function (err) {
        if (exports.stats) {
            if (err) {
                console.log('ERROR: '.red + err);
            } else {
                // console.log('INFO: '.green + filename + '.pas created');
            }
        }
        if (!err) {
            var command = 'fpc ' + path + filename + '.pas'; // Compile the Pascal code
            exec(command, function (error, stdout, stderr) {
                if (error) {
                    if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1) {
                        var out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
                        fn(out);
                    } else {
                        if (exports.stats) {
                            // console.log('INFO: '.green + filename + '.pas contained an error while compiling');
                        }
                        var out = { error: stderr };
                        fn(out);
                    }
                } else {
                    if (exports.stats) {
                        // console.log('INFO: '.green + filename + '.pas successfully compiled!');
                    }
                    var command = ' ./temp/' + filename; // Run the compiled Pascal program
                    exec(command, function (error, stdout, stderr) {
                        if (error) {
                            if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1) {
                                var out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
                                fn(out);
                            } else {
                                if (exports.stats) {
                                    // console.log('INFO: '.green + filename + '.pas contained an error while executing');
                                }
                                var out = { error: stderr };
                                fn(out);
                            }
                        } else {
                            if (exports.stats) {
                                // console.log('INFO: '.green + filename + '.pas successfully executed!');
                            }
                            var out = { output: stdout };
                            fn(out);
                        }
                    });
                }
            });
        }
    });
};

exports.compilePascalWithInput = function (envData, code, input, fn) {
    var filename = cuid.slug();
    var path = './temp/';

    fs.writeFile(path + filename + '.pas', code, function (err) {
        if (exports.stats) {
            if (err) {
                console.log('ERROR: '.red + err);
            }
            // else
            // console.log('INFO: '.green + filename + '.pas created');
        }
        if (!err) {
            fs.writeFile(path + filename + 'input.txt', input, function (err) {
                if (exports.stats) {
                    if (err) {
                        console.log('ERROR: '.red + err);
                    }
                    // else
                    // console.log('INFO: '.green + filename + 'input.txt created');
                }
                if (!err) {
                    var command = 'fpc ' + path + filename + '.pas'; // Compile the Pascal code
                    exec(command, function (error, stdout, stderr) {
                        if (error) {
                            if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1) {
                                var out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
                                fn(out);
                            } else {
                                if (exports.stats) {
                                    // console.log('INFO: '.green + filename + '.pas contained an error while compiling');
                                }
                                var out = { error: stderr };
                                fn(out);
                            }
                        } else {
                            var command = ' ./temp/' + filename + ' < ' + path + filename + 'input.txt'; // Run the compiled Pascal program with input
                            exec(command, function (error, stdout, stderr) {
                                if (error) {
                                    if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1) {
                                        var out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
                                        fn(out);
                                    } else {
                                        if (exports.stats) {
                                            // console.log('INFO: '.green + filename + '.pas contained an error while executing');
                                        }
                                        var out = { error: stderr };
                                        fn(out);
                                    }
                                } else {
                                    if (exports.stats) {
                                        // console.log('INFO: '.green + filename + '.pas successfully executed!');
                                    }
                                    var out = { output: stdout };
                                    fn(out);
                                }
                            });
                        }
                    });
                }
            });
        }
    });
};